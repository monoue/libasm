mov :
Move source to destination
ソースからデスティネーションへの移動

inc :
Increment by 1 
1増量します

cmp : 
Set condition codes according to S1
- S2
S1に応じて条件コードを設定
- S2

sub :
Subtract source from destination
デスティネーションからソースを引く

jne : 
Jump if not equal/nonzero
等しくない/ゼロでない場合はジャンプ

je :
Jump if equal/zero
等価/ゼロの場合はジャンプ

jmp :
Jump to specified location
指定された場所にジャンプ

jb : 
Jump if below (unsigned)
以下の場合はジャンプ

js :
Jump if negative
負の場合はジャンプ

jl :
Jump if less
少ない場合はジャンプ

push : 
Push source onto stack
ソースをスタックにプッシュ

pop : 
Pop top of stack into destination
スタックの先頭を目的地にポップ

call : 
Push return address and jump to label
返却アドレスを押してラベルにジャンプ

BYTE[] : 
[] : A memory address
メモリアドレス
BYTE :　use a suffix to show how large the operands are going to be
オペランドの大きさを示すために接尾辞を使用します。

rax: 
戻り値

rdi :
Used to pass the 1st argument to a function
第1引数を関数に渡すために使用します。

rsi : 
Used to pass the 2nd argument to a function 
第2引数を関数に渡すために使用します。

rdx :
Used to pass the 3rd argument to a function & optionally
to return a second value
第3引数を関数に渡すために使用します。
を使用して、二番目の値を返すようにします。

r10 :
Temporary register also used to pass a function's static
chain pointer
関数のスタティックを渡すためにも使用されるテンポラリレジスタ
チェーンポインタ

QWORD = 8byte
DWORD = 4byte
WORD = 2byte
BYTE = 1byte バイト

x86-64 には64ビットの汎用レジスタが16本あります。
それぞれ64ビット(8バイト)、
       32ビット(4バイト)、
       16ビット(2バイト)、
       8ビット(1バイト)
のレジスタとして使用することができます


8-byte  4-b     2-b     1-b
%rax    %eax    %ax     %al
%rcx    %ecx    %cx     %cl
%rdx    %edx    %dx     %dl
%rbx    %ebx    %bx     %bl
%rsi    %esi    %si     %sil
%rdi    %edi    %di     %dil
%rsp    %esp    %sp     %spl
%rbp    %ebp    %bp     %bpl
%r8     %r8d    %r8w    %r8b
%r9     %r9d    %r9w    %r9b
%r10    %r10d   %r10w   %r10b
%r11    %r11d   %r11w   %r11b
%r12    %r12d   %r12w   %r12b
%r13    %r13d   %r13w   %r13b
%r14    %r14d   %r14w   %r14b
%r15    %r15d   %r15w   %r15b

rsi = 8byte
esi = 下位4byte (int）
si = 下位2byte
sil = 下位1byte (char)

mov  BYTE[rdi], BYTE[rsi]
メモリtoメモリができない。
メモリtoレジスタ、レジスタtoメモリ、レジスタtoレジスタのどれかで実装します。

https://courses.cs.washington.edu/courses/cse378/10au/sections/Section1_recap.pdf?
https://cs.brown.edu/courses/cs033/docs/guides/x64_cheatsheet.pdf
https://www.tutorialspoint.com/assembly_programming/assembly_registers.htm
https://qiita.com/h2suzuki/items/0cc924cdd9d5c6d47448